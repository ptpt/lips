Literate Programming Utils
==========================

## Introduction

`lips` is a set of quick-and-dirty utils designed for *inverse
literate programming*, i.e. generating documentation from source
code.

To install `lips`, copy `lips/*` to your `PATH` and make them
executable. Since these tools are independent to each other, you can
take only the ones you need.

This documentation is generated by `lips`.

## Examples

### Source code -> Markdown
Write markdown in comments:
```
$ cat examples/say.js
#+sh cat examples/say.js
```

Uncomment it, then it becomes a markdown documentation:
```
$ ignore.awk examples/say.js | uncomment.awk codeout="highlight.awk -vlang=javascript"
#+sh ignore.awk examples/say.js | uncomment.awk codeout="highlight.awk -vlang=javascript"
```

### Include partials
You have a main markdown file, and several partials prepared:
```
$ cat examples/main.md
#+sh cat examples/main.md

$ cat examples/intro.md
#+sh cat examples/intro.md
```

Include them in one command:
```
$ sh.awk examples/main.md
#+sh sh.awk examples/main.md
```

## Usage

### `uncomment.awk`: uncomment source code
```
usage: uncomment.awk [codeout] [comment="//"] FILENAME
```

Uncomment `FILENAME` by simply removing the leading comment delimiter
in each comment line, and pipe code blocks (the non-comment lines) to
the command specified by `codeout`.

You need to specify another comment delimiter when your source code is not
commented by `//`.

### `sh.awk`: simple shell-base templating
```
usage: sh.awk [shell="/bin/sh"] FILENAME
```

Pipe commands after the mark `\#+sh` to `SHELL`, and replace each mark
and command with its output.

```
$ cat today
  Today is \#+sh date +%Y-%m-%d

$ sh.awk today
  #+sh echo "Today is #+sh date +%Y-%m-%d" | sh.awk
```

### `ignore.awk`: ignore blocks
```
usage: ignore.awk FILENAME
```

Like `cat FILENAME` but ignore blocks between `#+ignore` and
`#+endignore`, and lines containing `#+ignoreline`.

### `block.awk`: block extraction
```
usage: block.awk name=NAME FILENAME
```

Print out a named block. A named block is a block between `#+block
NAME` and `#+endblock`.

### `fence.awk` and `highlight.awk`: fence your code block

```
usage: fence.awk -vlang=LANG FILENAME
       highlight.awk -vlang=LANG FIELNAME
```

`fence.awk` wraps your code block with `` ```LANG `` and `` ``` ``,
while `highlight.awk` wraps with `{% highlight LANG
%}` and `{% endhighlight %}`.


## License

See LICENSE.
